<?php
/**
 * ProjectPhase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Project
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Project API
 *
 * ConnectWise Project API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Project\Model;

use \ArrayAccess;

/**
 * ProjectPhase Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Project
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProjectPhase implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProjectPhase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'project_id' => 'int',
        'description' => 'string',
        'board' => '\Spinen\ConnectWise\Clients\Project\Model\ProjectBoardReference',
        'status' => '\Spinen\ConnectWise\Clients\Project\Model\PhaseStatusReference',
        'agreement' => '\Spinen\ConnectWise\Clients\Project\Model\AgreementReference',
        'opportunity' => '\Spinen\ConnectWise\Clients\Project\Model\OpportunityReference',
        'parent_phase' => '\Spinen\ConnectWise\Clients\Project\Model\ProjectPhaseReference',
        'wbs_code' => 'string',
        'bill_time' => 'string',
        'bill_expenses' => 'string',
        'bill_products' => 'string',
        'mark_as_milestone_flag' => 'bool',
        'notes' => 'string',
        'deadline_date' => '\DateTime',
        'bill_separately_flag' => 'bool',
        'billing_method' => 'string',
        'scheduled_hours' => 'double',
        'scheduled_start' => 'string',
        'scheduled_end' => 'string',
        'actual_hours' => 'double',
        'actual_start' => 'string',
        'actual_end' => 'string',
        'budget_hours' => 'double',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'hourly_rate' => 'double',
        'billing_start_date' => '\DateTime',
        'bill_phase_closed_flag' => 'bool',
        'bill_project_closed_flag' => 'bool',
        'downpayment' => 'double',
        'po_number' => 'string',
        'po_amount' => 'double',
        'estimated_time_cost' => 'double',
        'estimated_expense_cost' => 'double',
        'estimated_product_cost' => 'double',
        'estimated_time_revenue' => 'double',
        'estimated_expense_revenue' => 'double',
        'estimated_product_revenue' => 'double',
        '_info' => '\Spinen\ConnectWise\Clients\Project\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project_id' => 'projectId',
        'description' => 'description',
        'board' => 'board',
        'status' => 'status',
        'agreement' => 'agreement',
        'opportunity' => 'opportunity',
        'parent_phase' => 'parentPhase',
        'wbs_code' => 'wbsCode',
        'bill_time' => 'billTime',
        'bill_expenses' => 'billExpenses',
        'bill_products' => 'billProducts',
        'mark_as_milestone_flag' => 'markAsMilestoneFlag',
        'notes' => 'notes',
        'deadline_date' => 'deadlineDate',
        'bill_separately_flag' => 'billSeparatelyFlag',
        'billing_method' => 'billingMethod',
        'scheduled_hours' => 'scheduledHours',
        'scheduled_start' => 'scheduledStart',
        'scheduled_end' => 'scheduledEnd',
        'actual_hours' => 'actualHours',
        'actual_start' => 'actualStart',
        'actual_end' => 'actualEnd',
        'budget_hours' => 'budgetHours',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'hourly_rate' => 'hourlyRate',
        'billing_start_date' => 'billingStartDate',
        'bill_phase_closed_flag' => 'billPhaseClosedFlag',
        'bill_project_closed_flag' => 'billProjectClosedFlag',
        'downpayment' => 'downpayment',
        'po_number' => 'poNumber',
        'po_amount' => 'poAmount',
        'estimated_time_cost' => 'estimatedTimeCost',
        'estimated_expense_cost' => 'estimatedExpenseCost',
        'estimated_product_cost' => 'estimatedProductCost',
        'estimated_time_revenue' => 'estimatedTimeRevenue',
        'estimated_expense_revenue' => 'estimatedExpenseRevenue',
        'estimated_product_revenue' => 'estimatedProductRevenue',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project_id' => 'setProjectId',
        'description' => 'setDescription',
        'board' => 'setBoard',
        'status' => 'setStatus',
        'agreement' => 'setAgreement',
        'opportunity' => 'setOpportunity',
        'parent_phase' => 'setParentPhase',
        'wbs_code' => 'setWbsCode',
        'bill_time' => 'setBillTime',
        'bill_expenses' => 'setBillExpenses',
        'bill_products' => 'setBillProducts',
        'mark_as_milestone_flag' => 'setMarkAsMilestoneFlag',
        'notes' => 'setNotes',
        'deadline_date' => 'setDeadlineDate',
        'bill_separately_flag' => 'setBillSeparatelyFlag',
        'billing_method' => 'setBillingMethod',
        'scheduled_hours' => 'setScheduledHours',
        'scheduled_start' => 'setScheduledStart',
        'scheduled_end' => 'setScheduledEnd',
        'actual_hours' => 'setActualHours',
        'actual_start' => 'setActualStart',
        'actual_end' => 'setActualEnd',
        'budget_hours' => 'setBudgetHours',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'hourly_rate' => 'setHourlyRate',
        'billing_start_date' => 'setBillingStartDate',
        'bill_phase_closed_flag' => 'setBillPhaseClosedFlag',
        'bill_project_closed_flag' => 'setBillProjectClosedFlag',
        'downpayment' => 'setDownpayment',
        'po_number' => 'setPoNumber',
        'po_amount' => 'setPoAmount',
        'estimated_time_cost' => 'setEstimatedTimeCost',
        'estimated_expense_cost' => 'setEstimatedExpenseCost',
        'estimated_product_cost' => 'setEstimatedProductCost',
        'estimated_time_revenue' => 'setEstimatedTimeRevenue',
        'estimated_expense_revenue' => 'setEstimatedExpenseRevenue',
        'estimated_product_revenue' => 'setEstimatedProductRevenue',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project_id' => 'getProjectId',
        'description' => 'getDescription',
        'board' => 'getBoard',
        'status' => 'getStatus',
        'agreement' => 'getAgreement',
        'opportunity' => 'getOpportunity',
        'parent_phase' => 'getParentPhase',
        'wbs_code' => 'getWbsCode',
        'bill_time' => 'getBillTime',
        'bill_expenses' => 'getBillExpenses',
        'bill_products' => 'getBillProducts',
        'mark_as_milestone_flag' => 'getMarkAsMilestoneFlag',
        'notes' => 'getNotes',
        'deadline_date' => 'getDeadlineDate',
        'bill_separately_flag' => 'getBillSeparatelyFlag',
        'billing_method' => 'getBillingMethod',
        'scheduled_hours' => 'getScheduledHours',
        'scheduled_start' => 'getScheduledStart',
        'scheduled_end' => 'getScheduledEnd',
        'actual_hours' => 'getActualHours',
        'actual_start' => 'getActualStart',
        'actual_end' => 'getActualEnd',
        'budget_hours' => 'getBudgetHours',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'hourly_rate' => 'getHourlyRate',
        'billing_start_date' => 'getBillingStartDate',
        'bill_phase_closed_flag' => 'getBillPhaseClosedFlag',
        'bill_project_closed_flag' => 'getBillProjectClosedFlag',
        'downpayment' => 'getDownpayment',
        'po_number' => 'getPoNumber',
        'po_amount' => 'getPoAmount',
        'estimated_time_cost' => 'getEstimatedTimeCost',
        'estimated_expense_cost' => 'getEstimatedExpenseCost',
        'estimated_product_cost' => 'getEstimatedProductCost',
        'estimated_time_revenue' => 'getEstimatedTimeRevenue',
        'estimated_expense_revenue' => 'getEstimatedExpenseRevenue',
        'estimated_product_revenue' => 'getEstimatedProductRevenue',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const BILL_TIME_BILLABLE = 'Billable';
    const BILL_TIME_DO_NOT_BILL = 'DoNotBill';
    const BILL_TIME_NO_CHARGE = 'NoCharge';
    const BILL_TIME_NO_DEFAULT = 'NoDefault';
    const BILL_EXPENSES_BILLABLE = 'Billable';
    const BILL_EXPENSES_DO_NOT_BILL = 'DoNotBill';
    const BILL_EXPENSES_NO_CHARGE = 'NoCharge';
    const BILL_EXPENSES_NO_DEFAULT = 'NoDefault';
    const BILL_PRODUCTS_BILLABLE = 'Billable';
    const BILL_PRODUCTS_DO_NOT_BILL = 'DoNotBill';
    const BILL_PRODUCTS_NO_CHARGE = 'NoCharge';
    const BILL_PRODUCTS_NO_DEFAULT = 'NoDefault';
    const BILLING_METHOD_ACTUAL_RATES = 'ActualRates';
    const BILLING_METHOD_FIXED_FEE = 'FixedFee';
    const BILLING_METHOD_NOT_TO_EXCEED = 'NotToExceed';
    const BILLING_METHOD_OVERRIDE_RATE = 'OverrideRate';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillTimeAllowableValues()
    {
        return [
            self::BILL_TIME_BILLABLE,
            self::BILL_TIME_DO_NOT_BILL,
            self::BILL_TIME_NO_CHARGE,
            self::BILL_TIME_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillExpensesAllowableValues()
    {
        return [
            self::BILL_EXPENSES_BILLABLE,
            self::BILL_EXPENSES_DO_NOT_BILL,
            self::BILL_EXPENSES_NO_CHARGE,
            self::BILL_EXPENSES_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillProductsAllowableValues()
    {
        return [
            self::BILL_PRODUCTS_BILLABLE,
            self::BILL_PRODUCTS_DO_NOT_BILL,
            self::BILL_PRODUCTS_NO_CHARGE,
            self::BILL_PRODUCTS_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillingMethodAllowableValues()
    {
        return [
            self::BILLING_METHOD_ACTUAL_RATES,
            self::BILLING_METHOD_FIXED_FEE,
            self::BILLING_METHOD_NOT_TO_EXCEED,
            self::BILLING_METHOD_OVERRIDE_RATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['board'] = isset($data['board']) ? $data['board'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['opportunity'] = isset($data['opportunity']) ? $data['opportunity'] : null;
        $this->container['parent_phase'] = isset($data['parent_phase']) ? $data['parent_phase'] : null;
        $this->container['wbs_code'] = isset($data['wbs_code']) ? $data['wbs_code'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['bill_expenses'] = isset($data['bill_expenses']) ? $data['bill_expenses'] : null;
        $this->container['bill_products'] = isset($data['bill_products']) ? $data['bill_products'] : null;
        $this->container['mark_as_milestone_flag'] = isset($data['mark_as_milestone_flag']) ? $data['mark_as_milestone_flag'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['deadline_date'] = isset($data['deadline_date']) ? $data['deadline_date'] : null;
        $this->container['bill_separately_flag'] = isset($data['bill_separately_flag']) ? $data['bill_separately_flag'] : null;
        $this->container['billing_method'] = isset($data['billing_method']) ? $data['billing_method'] : null;
        $this->container['scheduled_hours'] = isset($data['scheduled_hours']) ? $data['scheduled_hours'] : null;
        $this->container['scheduled_start'] = isset($data['scheduled_start']) ? $data['scheduled_start'] : null;
        $this->container['scheduled_end'] = isset($data['scheduled_end']) ? $data['scheduled_end'] : null;
        $this->container['actual_hours'] = isset($data['actual_hours']) ? $data['actual_hours'] : null;
        $this->container['actual_start'] = isset($data['actual_start']) ? $data['actual_start'] : null;
        $this->container['actual_end'] = isset($data['actual_end']) ? $data['actual_end'] : null;
        $this->container['budget_hours'] = isset($data['budget_hours']) ? $data['budget_hours'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['hourly_rate'] = isset($data['hourly_rate']) ? $data['hourly_rate'] : null;
        $this->container['billing_start_date'] = isset($data['billing_start_date']) ? $data['billing_start_date'] : null;
        $this->container['bill_phase_closed_flag'] = isset($data['bill_phase_closed_flag']) ? $data['bill_phase_closed_flag'] : null;
        $this->container['bill_project_closed_flag'] = isset($data['bill_project_closed_flag']) ? $data['bill_project_closed_flag'] : null;
        $this->container['downpayment'] = isset($data['downpayment']) ? $data['downpayment'] : null;
        $this->container['po_number'] = isset($data['po_number']) ? $data['po_number'] : null;
        $this->container['po_amount'] = isset($data['po_amount']) ? $data['po_amount'] : null;
        $this->container['estimated_time_cost'] = isset($data['estimated_time_cost']) ? $data['estimated_time_cost'] : null;
        $this->container['estimated_expense_cost'] = isset($data['estimated_expense_cost']) ? $data['estimated_expense_cost'] : null;
        $this->container['estimated_product_cost'] = isset($data['estimated_product_cost']) ? $data['estimated_product_cost'] : null;
        $this->container['estimated_time_revenue'] = isset($data['estimated_time_revenue']) ? $data['estimated_time_revenue'] : null;
        $this->container['estimated_expense_revenue'] = isset($data['estimated_expense_revenue']) ? $data['estimated_expense_revenue'] : null;
        $this->container['estimated_product_revenue'] = isset($data['estimated_product_revenue']) ? $data['estimated_product_revenue'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 100)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['wbs_code']) && (strlen($this->container['wbs_code']) > 50)) {
            $invalid_properties[] = "invalid value for 'wbs_code', the character length must be smaller than or equal to 50.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_time', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_expenses', must be one of #{allowed_values}.";
        }

        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_products', must be one of #{allowed_values}.";
        }

        $allowed_values = ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"];
        if (!in_array($this->container['billing_method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billing_method', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['po_number']) && (strlen($this->container['po_number']) > 25)) {
            $invalid_properties[] = "invalid value for 'po_number', the character length must be smaller than or equal to 25.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 100) {
            return false;
        }
        if (strlen($this->container['wbs_code']) > 50) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"];
        if (!in_array($this->container['billing_method'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['po_number']) > 25) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_id
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     * @param int $project_id
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 100)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProjectPhase., must be smaller than or equal to 100.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets board
     * @return \Spinen\ConnectWise\Clients\Project\Model\ProjectBoardReference
     */
    public function getBoard()
    {
        return $this->container['board'];
    }

    /**
     * Sets board
     * @param \Spinen\ConnectWise\Clients\Project\Model\ProjectBoardReference $board
     * @return $this
     */
    public function setBoard($board)
    {
        $this->container['board'] = $board;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Project\Model\PhaseStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Project\Model\PhaseStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Project\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Project\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets opportunity
     * @return \Spinen\ConnectWise\Clients\Project\Model\OpportunityReference
     */
    public function getOpportunity()
    {
        return $this->container['opportunity'];
    }

    /**
     * Sets opportunity
     * @param \Spinen\ConnectWise\Clients\Project\Model\OpportunityReference $opportunity
     * @return $this
     */
    public function setOpportunity($opportunity)
    {
        $this->container['opportunity'] = $opportunity;

        return $this;
    }

    /**
     * Gets parent_phase
     * @return \Spinen\ConnectWise\Clients\Project\Model\ProjectPhaseReference
     */
    public function getParentPhase()
    {
        return $this->container['parent_phase'];
    }

    /**
     * Sets parent_phase
     * @param \Spinen\ConnectWise\Clients\Project\Model\ProjectPhaseReference $parent_phase
     * @return $this
     */
    public function setParentPhase($parent_phase)
    {
        $this->container['parent_phase'] = $parent_phase;

        return $this;
    }

    /**
     * Gets wbs_code
     * @return string
     */
    public function getWbsCode()
    {
        return $this->container['wbs_code'];
    }

    /**
     * Sets wbs_code
     * @param string $wbs_code
     * @return $this
     */
    public function setWbsCode($wbs_code)
    {
        if (!is_null($wbs_code) && (strlen($wbs_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $wbs_code when calling ProjectPhase., must be smaller than or equal to 50.');
        }

        $this->container['wbs_code'] = $wbs_code;

        return $this;
    }

    /**
     * Gets bill_time
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     * @param string $bill_time
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_time) && (!in_array($bill_time, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_time', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets bill_expenses
     * @return string
     */
    public function getBillExpenses()
    {
        return $this->container['bill_expenses'];
    }

    /**
     * Sets bill_expenses
     * @param string $bill_expenses
     * @return $this
     */
    public function setBillExpenses($bill_expenses)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_expenses) && (!in_array($bill_expenses, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_expenses', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_expenses'] = $bill_expenses;

        return $this;
    }

    /**
     * Gets bill_products
     * @return string
     */
    public function getBillProducts()
    {
        return $this->container['bill_products'];
    }

    /**
     * Sets bill_products
     * @param string $bill_products
     * @return $this
     */
    public function setBillProducts($bill_products)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($bill_products) && (!in_array($bill_products, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_products', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_products'] = $bill_products;

        return $this;
    }

    /**
     * Gets mark_as_milestone_flag
     * @return bool
     */
    public function getMarkAsMilestoneFlag()
    {
        return $this->container['mark_as_milestone_flag'];
    }

    /**
     * Sets mark_as_milestone_flag
     * @param bool $mark_as_milestone_flag
     * @return $this
     */
    public function setMarkAsMilestoneFlag($mark_as_milestone_flag)
    {
        $this->container['mark_as_milestone_flag'] = $mark_as_milestone_flag;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets deadline_date
     * @return \DateTime
     */
    public function getDeadlineDate()
    {
        return $this->container['deadline_date'];
    }

    /**
     * Sets deadline_date
     * @param \DateTime $deadline_date
     * @return $this
     */
    public function setDeadlineDate($deadline_date)
    {
        $this->container['deadline_date'] = $deadline_date;

        return $this;
    }

    /**
     * Gets bill_separately_flag
     * @return bool
     */
    public function getBillSeparatelyFlag()
    {
        return $this->container['bill_separately_flag'];
    }

    /**
     * Sets bill_separately_flag
     * @param bool $bill_separately_flag
     * @return $this
     */
    public function setBillSeparatelyFlag($bill_separately_flag)
    {
        $this->container['bill_separately_flag'] = $bill_separately_flag;

        return $this;
    }

    /**
     * Gets billing_method
     * @return string
     */
    public function getBillingMethod()
    {
        return $this->container['billing_method'];
    }

    /**
     * Sets billing_method
     * @param string $billing_method billingMethod is required if the phase billSeparatelyFlag is true
     * @return $this
     */
    public function setBillingMethod($billing_method)
    {
        $allowed_values = array('ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate');
        if (!is_null($billing_method) && (!in_array($billing_method, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billing_method', must be one of 'ActualRates', 'FixedFee', 'NotToExceed', 'OverrideRate'");
        }
        $this->container['billing_method'] = $billing_method;

        return $this;
    }

    /**
     * Gets scheduled_hours
     * @return double
     */
    public function getScheduledHours()
    {
        return $this->container['scheduled_hours'];
    }

    /**
     * Sets scheduled_hours
     * @param double $scheduled_hours
     * @return $this
     */
    public function setScheduledHours($scheduled_hours)
    {
        $this->container['scheduled_hours'] = $scheduled_hours;

        return $this;
    }

    /**
     * Gets scheduled_start
     * @return string
     */
    public function getScheduledStart()
    {
        return $this->container['scheduled_start'];
    }

    /**
     * Sets scheduled_start
     * @param string $scheduled_start
     * @return $this
     */
    public function setScheduledStart($scheduled_start)
    {
        $this->container['scheduled_start'] = $scheduled_start;

        return $this;
    }

    /**
     * Gets scheduled_end
     * @return string
     */
    public function getScheduledEnd()
    {
        return $this->container['scheduled_end'];
    }

    /**
     * Sets scheduled_end
     * @param string $scheduled_end
     * @return $this
     */
    public function setScheduledEnd($scheduled_end)
    {
        $this->container['scheduled_end'] = $scheduled_end;

        return $this;
    }

    /**
     * Gets actual_hours
     * @return double
     */
    public function getActualHours()
    {
        return $this->container['actual_hours'];
    }

    /**
     * Sets actual_hours
     * @param double $actual_hours
     * @return $this
     */
    public function setActualHours($actual_hours)
    {
        $this->container['actual_hours'] = $actual_hours;

        return $this;
    }

    /**
     * Gets actual_start
     * @return string
     */
    public function getActualStart()
    {
        return $this->container['actual_start'];
    }

    /**
     * Sets actual_start
     * @param string $actual_start
     * @return $this
     */
    public function setActualStart($actual_start)
    {
        $this->container['actual_start'] = $actual_start;

        return $this;
    }

    /**
     * Gets actual_end
     * @return string
     */
    public function getActualEnd()
    {
        return $this->container['actual_end'];
    }

    /**
     * Sets actual_end
     * @param string $actual_end
     * @return $this
     */
    public function setActualEnd($actual_end)
    {
        $this->container['actual_end'] = $actual_end;

        return $this;
    }

    /**
     * Gets budget_hours
     * @return double
     */
    public function getBudgetHours()
    {
        return $this->container['budget_hours'];
    }

    /**
     * Sets budget_hours
     * @param double $budget_hours
     * @return $this
     */
    public function setBudgetHours($budget_hours)
    {
        $this->container['budget_hours'] = $budget_hours;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets hourly_rate
     * @return double
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     * @param double $hourly_rate
     * @return $this
     */
    public function setHourlyRate($hourly_rate)
    {
        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets billing_start_date
     * @return \DateTime
     */
    public function getBillingStartDate()
    {
        return $this->container['billing_start_date'];
    }

    /**
     * Sets billing_start_date
     * @param \DateTime $billing_start_date
     * @return $this
     */
    public function setBillingStartDate($billing_start_date)
    {
        $this->container['billing_start_date'] = $billing_start_date;

        return $this;
    }

    /**
     * Gets bill_phase_closed_flag
     * @return bool
     */
    public function getBillPhaseClosedFlag()
    {
        return $this->container['bill_phase_closed_flag'];
    }

    /**
     * Sets bill_phase_closed_flag
     * @param bool $bill_phase_closed_flag This phase can only be billed after it has been closed
     * @return $this
     */
    public function setBillPhaseClosedFlag($bill_phase_closed_flag)
    {
        $this->container['bill_phase_closed_flag'] = $bill_phase_closed_flag;

        return $this;
    }

    /**
     * Gets bill_project_closed_flag
     * @return bool
     */
    public function getBillProjectClosedFlag()
    {
        return $this->container['bill_project_closed_flag'];
    }

    /**
     * Sets bill_project_closed_flag
     * @param bool $bill_project_closed_flag This phase can only be billed after the project has been closed
     * @return $this
     */
    public function setBillProjectClosedFlag($bill_project_closed_flag)
    {
        $this->container['bill_project_closed_flag'] = $bill_project_closed_flag;

        return $this;
    }

    /**
     * Gets downpayment
     * @return double
     */
    public function getDownpayment()
    {
        return $this->container['downpayment'];
    }

    /**
     * Sets downpayment
     * @param double $downpayment
     * @return $this
     */
    public function setDownpayment($downpayment)
    {
        $this->container['downpayment'] = $downpayment;

        return $this;
    }

    /**
     * Gets po_number
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     * @param string $po_number
     * @return $this
     */
    public function setPoNumber($po_number)
    {
        if (!is_null($po_number) && (strlen($po_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $po_number when calling ProjectPhase., must be smaller than or equal to 25.');
        }

        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets po_amount
     * @return double
     */
    public function getPoAmount()
    {
        return $this->container['po_amount'];
    }

    /**
     * Sets po_amount
     * @param double $po_amount
     * @return $this
     */
    public function setPoAmount($po_amount)
    {
        $this->container['po_amount'] = $po_amount;

        return $this;
    }

    /**
     * Gets estimated_time_cost
     * @return double
     */
    public function getEstimatedTimeCost()
    {
        return $this->container['estimated_time_cost'];
    }

    /**
     * Sets estimated_time_cost
     * @param double $estimated_time_cost
     * @return $this
     */
    public function setEstimatedTimeCost($estimated_time_cost)
    {
        $this->container['estimated_time_cost'] = $estimated_time_cost;

        return $this;
    }

    /**
     * Gets estimated_expense_cost
     * @return double
     */
    public function getEstimatedExpenseCost()
    {
        return $this->container['estimated_expense_cost'];
    }

    /**
     * Sets estimated_expense_cost
     * @param double $estimated_expense_cost
     * @return $this
     */
    public function setEstimatedExpenseCost($estimated_expense_cost)
    {
        $this->container['estimated_expense_cost'] = $estimated_expense_cost;

        return $this;
    }

    /**
     * Gets estimated_product_cost
     * @return double
     */
    public function getEstimatedProductCost()
    {
        return $this->container['estimated_product_cost'];
    }

    /**
     * Sets estimated_product_cost
     * @param double $estimated_product_cost
     * @return $this
     */
    public function setEstimatedProductCost($estimated_product_cost)
    {
        $this->container['estimated_product_cost'] = $estimated_product_cost;

        return $this;
    }

    /**
     * Gets estimated_time_revenue
     * @return double
     */
    public function getEstimatedTimeRevenue()
    {
        return $this->container['estimated_time_revenue'];
    }

    /**
     * Sets estimated_time_revenue
     * @param double $estimated_time_revenue
     * @return $this
     */
    public function setEstimatedTimeRevenue($estimated_time_revenue)
    {
        $this->container['estimated_time_revenue'] = $estimated_time_revenue;

        return $this;
    }

    /**
     * Gets estimated_expense_revenue
     * @return double
     */
    public function getEstimatedExpenseRevenue()
    {
        return $this->container['estimated_expense_revenue'];
    }

    /**
     * Sets estimated_expense_revenue
     * @param double $estimated_expense_revenue
     * @return $this
     */
    public function setEstimatedExpenseRevenue($estimated_expense_revenue)
    {
        $this->container['estimated_expense_revenue'] = $estimated_expense_revenue;

        return $this;
    }

    /**
     * Gets estimated_product_revenue
     * @return double
     */
    public function getEstimatedProductRevenue()
    {
        return $this->container['estimated_product_revenue'];
    }

    /**
     * Sets estimated_product_revenue
     * @param double $estimated_product_revenue
     * @return $this
     */
    public function setEstimatedProductRevenue($estimated_product_revenue)
    {
        $this->container['estimated_product_revenue'] = $estimated_product_revenue;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Project\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Project\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Project\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Project\ObjectSerializer::sanitizeForSerialization($this));
    }
}


